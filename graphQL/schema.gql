# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AssetClass {
  active: Boolean!
  createdAt: DateTime!
  description: String!
  id: ID!
  name: String!
  updatedAt: DateTime!
}

type BooleanResultResponse {
  result: Boolean!
}

input CategoryFilterItem {
  category: StaticAssetCategory!
  orderList: [Int!]
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteFundingMethodInput {
  method: FundingMethod
  userFundingMethodId: ID
}

"""supported funding method types"""
enum FundingMethod {
  OneTime
  Recurring
  RoundUp
}

type GetUserStockResponse {
  category: String!
  description: String!
  id: ID!
  name: String!
}

type InvestmentCashInfo {
  cashAvailableForTrade: Float!
  cashAvailableForWithdrawal: Float!
  cashBalance: Float!
}

type InvestmentEquityPosition {
  marketValue: Float!
  side: String!
  symbol: String!
}

type InvestmentPerformanceItemResponse {
  cash: Float!
  cumRealizedPL: Float!
  date: String!
  deposits: Float!
  equity: Float!
  fees: Float!
  realizedDayPL: Float!
  unrealizedDayPL: Float!
  withdrawals: Float!
}

type InvestmentPreferencesSettingsResponse {
  assetClassList: [AssetClass!]!
  investmentValueList: [InvestmentValue!]!
  riskLevelList: [RiskLevel!]!
}

type InvestmentProfileSummaryResponse {
  cash: InvestmentCashInfo!
  equityPositions: [InvestmentEquityPosition!]!
  equityValue: Float!
}

type InvestmentQuestionnaire {
  active: Boolean!
  category: InvestmentQuestionnaireCategory!
  createdAt: DateTime!
  id: ID!
  name: String!
  options: [InvestmentQuestionnaireOption!]!
  order: Int!
  question: String!
  updatedAt: DateTime!
}

"""supported investment questionnaire types"""
enum InvestmentQuestionnaireCategory {
  Risk
  Value
}

type InvestmentQuestionnaireOption {
  active: Boolean!
  createdAt: DateTime!
  description: String!
  id: ID!
  option: String!
  order: Int!
  updatedAt: DateTime!
}

type InvestmentStatementItemResponse {
  displayName: String!
  fileKey: String!
}

"""investment statement type"""
enum InvestmentStatementType {
  AccountStatement
  TaxDocument
  TradeConfirmation
}

type InvestmentValue {
  active: Boolean!
  createdAt: DateTime!
  description: String!
  id: ID!
  investmentValue: String!
  updatedAt: DateTime!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""all possible Allio KYC check status"""
enum KycCheckStatus {
  approved
  declined
  pending
}

"""supported kyc check purposes"""
enum KycPurpose {
  Onboarding
}

type Mutation {
  deleteUserFundingMethod(fundingMethodList: [DeleteFundingMethodInput!]!, userId: String): BooleanResultResponse!
  deleteUserPlaidLinkedItem(plaidLinkedItemList: [UserPlaidIdentifierInput!]!, userId: String): BooleanResultResponse!
  setStaticAssetList(staticAssetInputList: [StaticAssetAllocationInput!]!): [StaticAssetResponseItem!]!
  setUserFundingMethod(fundingMethodList: [SetFundingMethodInput!]!, userId: String): [UserFundingMethod!]!
  setUserInvestmentPreferences(assetClassIdList: [String!], investmentValueIdList: [String!], riskLevelId: String, userId: String): UserInvestmentPreferences!
  setUserInvestmentQuestionnaireAnswer(answer: String, questionnaireId: String!, selectedOptionIdList: [String!], userId: String): [UserInvestmentQuestionnaireAnswer!]!
  setUserPlaidLinkedItem(plaidLinkedItemList: [UserPlaidLinkedItemInput!]!, userId: String): [UserPlaidLinkedItem!]!
  setUserRequiredPersonaInquiryList(requiredInquiryList: [UserRequiredPersonaInquiryInput!]!, userId: String): [UserRequiredPersonaInquiry!]!
  transferMoney(amount: Float!, fromAccountId: String!, transferType: String!, userId: String): TransferMoneyResponse!
}

"""supported plaid linked item verifications status check"""
enum PlaidLinkedItemVerificationStatus {
  AutomaticallyVerified
  ManuallyVerified
  PendingAutomaticVerification
  PendingManualVerification
  VerificationExpired
  VerificationFailed
}

type Query {
  getAllQuestionnaire(id: ID): [InvestmentQuestionnaire!]!
  getAssetClassList(idList: [String!]): [AssetClass!]!
  getInvestmentPreferencesSettings: InvestmentPreferencesSettingsResponse!
  getPlaidLinkToken: String!
  getStaticAssetList(categoryList: [CategoryFilterItem!], nameList: [String!], typeList: [TypeStaticAsset!]): [StaticAssetResponseItem!]!
  getUserAssetClassList(userId: String): [AssetClass!]!
  getUserFundingMethod(methodList: [FundingMethod!], userId: String): [UserFundingMethod!]!
  getUserFundingTransaction(userId: String): [UserFundingTransaction!]!
  getUserInvestmentPerformance(dayPeriod: Int, monthPeriod: Int, userId: String, weekPeriod: Int): [InvestmentPerformanceItemResponse!]!
  getUserInvestmentPreferences(userId: String): UserInvestmentPreferences!
  getUserInvestmentProfileSummary(userId: String): InvestmentProfileSummaryResponse
  getUserInvestmentQuestionnaireAnswers(questionnaireId: String, userId: String): [UserInvestmentQuestionnaireAnswer!]!
  getUserInvestmentStatements(from: DateTime!, to: DateTime!, type: InvestmentStatementType!, userId: String): [InvestmentStatementItemResponse!]!
  getUserInvestmentValueList(userId: String): [InvestmentValue!]!
  getUserPlaidLinkedItems(plaidLinkedItemList: [UserPlaidIdentifierInput!], userId: String): [UserPlaidLinkedItem!]!
  getUserRecommendedPortfolio(assetClassIdList: [String!], investmentValueIdList: [String!], userId: String): [RecommendedPortfolioAssetResponseItem!]!
  getUserRequiredPersonaInquiryList(kycCheckStatusList: [KycCheckStatus!], purposeList: [KycPurpose!], userId: String): [UserRequiredPersonaInquiry!]!
  getUserRiskLevel(userId: String): UserRiskLevel!
  getUserStock(userId: String): [GetUserStockResponse!]!
}

type RecommendedPortfolioAssetResponseItem {
  asset: String!
  id: ID!
  weight: Float!
}

"""supported recurring funding setting"""
enum RecurringFundingFrequency {
  Biweekly
  Daily
  Monthly
  Weekly
}

input RecurringFundingSettingInput {
  amount: Float!
  currency: String
  day: Int = 1
  frequency: RecurringFundingFrequency!
}

type RiskLevel {
  active: Boolean!
  createdAt: DateTime!
  description: String!
  id: ID!
  riskLevel: Int!
  updatedAt: DateTime!
}

"""available user roles"""
enum Roles {
  Admin
}

input SetFundingMethodInput {
  method: FundingMethod
  plaidLinkedItem: UserPlaidLinkedItemInput
  recurringFundingSetting: RecurringFundingSettingInput
  userFundingMethodId: ID
  userPlaidLinkedItemId: ID
}

type StaticAsset {
  description: String!
  id: ID!
  name: String!
  tag: [String!]!
  url: String
}

input StaticAssetAllocationInput {
  asset: StaticAssetInput
  category: StaticAssetCategory
  description: String
  id: ID
  name: String
  order: Int
  role: [Roles!]
  tag: [String!]
  type: TypeStaticAsset
}

"""supported static asset category"""
enum StaticAssetCategory {
  Splash
}

input StaticAssetInput {
  description: String!
  name: String!
  s3Bucket: String
  s3Tag: String
  tag: [String!]
}

type StaticAssetResponseItem {
  asset: StaticAsset!
  category: StaticAssetCategory!
  description: String!
  id: ID!
  name: String!
  order: Int!
  tag: [String!]!
  type: TypeStaticAsset!
}

type TransferMoneyResponse {
  isSuccess: Boolean!
  message: String
  userId: String
}

"""possible type of static asset"""
enum TypeStaticAsset {
  Animation
  Image
  Text
}

type UserFundingMethod {
  active: Boolean!
  createdAt: DateTime!
  id: ID!
  method: FundingMethod!
  plaidLinkedItem: UserPlaidLinkedItem!
  recurringFundingSetting: UserRecurringFundingSetting
  updatedAt: DateTime!
  userId: String!
}

type UserFundingTransaction {
  active: Boolean!
  amount: Float!
  attribute: JSON!
  createdAt: DateTime!
  currency: String!
  executionDate: DateTime!
  fromAccountTable: String!
  fundingMethod: UserFundingMethod!
  id: ID!
  note: String!
  statusNumber: Int!
  toAccountId: String!
  toAccountTable: String!
  updatedAt: DateTime!
  userId: String!
}

type UserInvestmentPreferences {
  assetClassList: [AssetClass!]!
  investmentValueList: [InvestmentValue!]!
  riskLevel: RiskLevel
}

type UserInvestmentQuestionnaireAnswer {
  active: Boolean!
  answer: String
  createdAt: DateTime!
  id: ID!
  questionnaireId: String!
  selectedOptionId: String
  updatedAt: DateTime!
  userId: String!
}

type UserPersonaInquiry {
  active: Boolean!
  attribute: JSON!
  createdAt: DateTime!
  id: ID!
  inquiryCompletedAt: DateTime!
  inquiryCreatedAt: DateTime!
  inquiryDecisionedAt: DateTime!
  inquiryExpiredAt: DateTime!
  inquiryFailedAt: DateTime!
  inquiryRedactedAt: DateTime!
  inquiryStartedAt: DateTime!
  status: String!
  updatedAt: DateTime!
  userId: String!
}

input UserPlaidIdentifierInput {
  accountId: String
  userPlaidLinkedItemId: String
}

type UserPlaidLinkedItem {
  accountId: String!
  accountMask: String!
  accountName: String!
  accountSubtype: String!
  accountType: String!
  active: Boolean!
  createdAt: DateTime!
  id: ID!
  institutionId: String!
  institutionName: String!
  updatedAt: DateTime!
  userId: String!
  verificationStatus: PlaidLinkedItemVerificationStatus
}

input UserPlaidLinkedItemInput {
  plaidAccountId: String!
  plaidInstitutionId: String!
  plaidPublicToken: String!
}

type UserRecurringFundingSetting {
  active: Boolean!
  amount: Float!
  createdAt: DateTime!
  currency: String!
  day: Int!
  frequency: RecurringFundingFrequency!
  id: ID!
  nextExecutionDate: DateTime!
  updatedAt: DateTime!
}

type UserRequiredPersonaInquiry {
  active: Boolean!
  createdAt: DateTime!
  id: ID!
  inquiry: UserPersonaInquiry!
  kycCheckStatus: KycCheckStatus!
  purpose: KycPurpose!
  updatedAt: DateTime!
  userId: String!
}

input UserRequiredPersonaInquiryInput {
  inquiryId: String!
  purpose: KycPurpose!
}

type UserRiskLevel {
  active: Boolean!
  createdAt: DateTime!
  id: ID!
  riskLevel: RiskLevel!
  updatedAt: DateTime!
  userId: String!
}
